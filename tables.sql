-- Drop existing tables if they exist
drop table if exists favorites;
drop table if exists animal_images;
drop table if exists animals;
drop table if exists users;
drop table if exists notifications;

-- Create users table
create table users (
    id TEXT PRIMARY KEY,
    username TEXT,
    full_name TEXT,
    email TEXT,
    avatar_url TEXT,
    phone_number TEXT,
    is_admin BOOLEAN DEFAULT false,
    push_token TEXT,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create animals table
create table animals (
    id bigint generated by default as identity primary key,
    title text not null,
    description text,
    price decimal(10,2) not null,
    category text not null,
    age text,
    gender text,
    location text,
    status text default 'available',
    created_by text references users(id) not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create animal_images table
create table animal_images (
    id bigint generated by default as identity primary key,
    animal_id bigint references animals(id) on delete cascade,
    image_url text not null,
    is_primary boolean default false,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create favorites table
create table favorites (
    id bigint generated by default as identity primary key,
    user_id text references users(id) on delete cascade,
    animal_id bigint references animals(id) on delete cascade,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    unique(user_id, animal_id)
);

-- Create notifications table
create table notifications (
    id bigint generated by default as identity primary key,
    user_id text references users(id) on delete cascade,
    title text not null,
    body text not null,
    animal_id bigint references animals(id) on delete cascade,
    is_read boolean default false,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable Row Level Security
alter table users enable row level security;
alter table animals enable row level security;
alter table animal_images enable row level security;
alter table favorites enable row level security;
alter table notifications enable row level security;

-- Create storage bucket for animal images
insert into storage.buckets (id, name) values ('animal_images', 'animal_images');

-- Function to get JWT user id
create or replace function requesting_user_id()
returns text as $$
    select nullif(current_setting('request.jwt.claims', true)::json->>'sub', '')::text;
$$ language sql stable;

-- Function to check if user is admin
create or replace function is_admin()
returns boolean as $$
    select exists(
        select 1 from users
        where id = requesting_user_id()
        and is_admin = true
    );
$$ language sql stable;

-- Policies for users table
create policy "Users can view all profiles" on users
    for select using (true);

create policy "Users can update own profile" on users
    for update using (id = requesting_user_id());

-- Policies for animals table
create policy "Anyone can view available animals" on animals
    for select using (true);

create policy "Only admin can create animals" on animals
    for insert with check (is_admin());

create policy "Only admin can update animals" on animals
    for update using (is_admin());

create policy "Only admin can delete animals" on animals
    for delete using (is_admin());

-- Policies for animal_images table
create policy "Anyone can view animal images" on animal_images
    for select using (true);

create policy "Only admin can manage animal images" on animal_images
    for all using (is_admin());

-- Policies for favorites table
create policy "Users can view their own favorites" on favorites
    for select using (user_id = requesting_user_id());

create policy "Users can manage their own favorites" on favorites
    for all using (user_id = requesting_user_id());

-- Policies for notifications table
create policy "Users can view their own notifications" on notifications
    for select using (user_id = requesting_user_id());

create policy "Users can update their own notifications" on notifications
    for update using (user_id = requesting_user_id());

-- Storage policy
create policy "Anyone can view animal images" on storage.objects
    for select using (bucket_id = 'animal_images');

create policy "Only admin can upload animal images" on storage.objects
    for insert with check (
        bucket_id = 'animal_images' 
        and is_admin()
    );

-- Enable realtime for relevant tables
alter publication supabase_realtime add table animals;
alter publication supabase_realtime add table favorites;
alter publication supabase_realtime add table notifications;